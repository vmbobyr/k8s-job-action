# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!! This repository is public !!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# repo is public until Github Action supports cloning private repos
# https://github.com/github/roadmap/issues/74
name: 'Run Kubernetes Job'
description: 'Create a K8s Job and tails its logs until it fails or complete'
inputs:
  namespace:  # id of input
    description: 'namespace to use (can be also created and/or deleted after use)'
    required: true
  name:
    description: 'job name to create in namespace'
    required: true
  image:
    description: 'image to run the job on'
    required: true
  command:
    description: command the job will run, can be "cmd arg" or "['cmd', 'arg']"
    required: false
    default: "[]"
  createNamespace:
    description: '[true/false] whether to create the namespace, default to false'
    required: false
    default: 'false'
  deleteNamespace:
    description: '[true/false] whether to delete the namespace if the job complete in time'
    required: false
    default: 'false'
  timeoutMinuteStartContainer:
    description: 'how long to wait for pulling image and starting container, does not apply once the container is running. Use action timeout_minute to timeout the overall Job run'
    required: false
    default: "5"
runs:
  using: "composite"
  steps:
    - name: "Check inputs"
      shell: bash
      run: |
        echo "     Check input:"
        echo "namespace: ${{ inputs.namespace }}"
        echo "name: ${{ inputs.name }}"
        echo "image: ${{ inputs.image }}"
        echo "command: ${{ inputs.command }}"
        echo "createNamespace: ${{ inputs.createNamespace }}"
        echo "deleteNamespace: ${{ inputs.cleanNamespace }}"

    - name: "Create Namespace"
      shell: bash
      run: |
        [[ "${{ inputs.createNamespace }}" != "true" ]] && exit 0
        echo "     Re-create namespace"
        kubectl delete namespace ${{ inputs.namespace }} || true
        kubectl create namespace ${{ inputs.namespace }}

    - name: "Create Job"
      shell: bash
      run: |
        cat <<EOF > job.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: ${{ inputs.name }}
          namespace: ${{ inputs.namespace }}
        spec:
          backoffLimit: 1
          completions: 1
          parallelism: 1
          template:
            spec:
              restartPolicy: OnFailure
              containers:
                - name: ${{ inputs.name }}
                  image: ${{ inputs.image }}
                  imagePullPolicy: Always
                  tty: true
                  command: ${{ inputs.command }}
                  env:
        EOF

        for e in $(printenv); do
          IFS='=' read -r -a key_val  <<< "$e"
          name=${key_val[0]}
          [[ "${name}" != _* ]] && continue
          name=${name:1}
          [[ "${name}" == "" ]] && continue
          # indent has to match the above heredoc
          cat <<EOF >> job.yaml
                      - name: "${name}"
                        value: "${key_val[1]}"
        EOF
        done

        echo "     Job to be created:"
        cat job.yaml
        echo "     Creating Job ${{ inputs.name }}"
        kubectl apply -f job.yaml

    - name: "Handle Job"
      shell: bash
      run: |
        jobName=${{ inputs.name }}
        namespace=${{ inputs.namespace }}

        [[ "${jobName}" == "" ]] && exit 0

        # first check if Job isn't already done (either with success or not)
        kubectl -n ${namespace} wait --for=condition=complete --timeout=0s job/${jobName} 2> /dev/null && done=true ||
        kubectl -n ${namespace} wait --for=condition=failed --timeout=0s job/${jobName} 2> /dev/null && done=true || true
        if [[ "${done}" != "true" ]]; then
          echo "     Waiting for Job pod to pull images and start containers (timeout ${{ inputs.timeoutMinuteStartContainer }} minutes)"
          # wait until we don't get an error fetching logs or until end of timeout
          finaldate=$(date -d " ${{ inputs.timeoutMinuteStartContainer }} minutes" +'%m/%d %H:%M')
          ready=false
          while [[ $ready != "true" ]]; do
              if [[ "$(date +'%m/%d %H:%M')" > "${finaldate}" ]]; then
                  echo "     Err: Timeout waiting for pods"
                  echo "     Attempting to get as much info as possible before exiting 1"
                  set +x
                  kubectl -n ${namespace} logs --tail=0 job/${jobName}  || true
                  kubectl -n ${namespace} describe job/${jobName}  || true
                  kubectl -n ${namespace} describe pod -l "job-name=${jobName}" || true
                  exit 1
              fi
              echo "... waiting"
              sleep 10
              kubectl -n ${namespace} logs --tail=0 job/${jobName}  2> /dev/null && ready=true || true
          done
          echo "     Job is running"
        else
          echo "     Job is already done (logs might not be available if it complete too long ago)"
        fi

        # then try to get logs
        echo "     Attempt to fetch logs"
        echo "-----------------------------"
        echo ""
        kubectl -n ${namespace} logs -f job/${jobName} || true
        echo ""
        echo "-----------------------------"

        # before checking final status
        echo "     Job is done, checking final status"
        # not elegant but the safest way to get the overall Job status as .failed and conditions start to get tricky
        # to look into as long as more than backofflimit is not 0
        # give 5s to Kubernetes to have time to update the job status
        kubectl -n ${namespace} wait --for=condition=complete --timeout=5s job/${jobName} && complete=true || true
        if [[ "${complete}" == "true" ]]; then
          echo "     Job final state is 'complete', it ended with sucess"
        else
          echo "     Job final state is not 'complete', it ended with failures"
          echo "     Namespace ${{ inputs.namespace }} will not be deleted to allow debugging"
          exit 1
        fi

    - name: "Clean Namespace"
      shell: bash
      run: |
        [[ "${{ inputs.deleteNamespace }}" != "true" ]] && exit 0
        echo "     Delete namespace"
        kubectl delete namespace ${{ inputs.namespace }} || true
